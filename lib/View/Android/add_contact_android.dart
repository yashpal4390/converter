// ignore_for_file: prefer_const_constructors, prefer_const_literals_to_create_immutablesimport 'dart:io';import 'package:converter/Controller/Provider/add_contact_provider.dart';import 'package:flutter/material.dart';import 'package:provider/provider.dart';import '../../Model/add_contact_model.dart';import '../../util.dart';GlobalKey<FormState> formKey = GlobalKey<FormState>();class addContact_andriod extends StatefulWidget {  const addContact_andriod({super.key});  @override  State<addContact_andriod> createState() => _addContact_andriodState();}class _addContact_andriodState extends State<addContact_andriod> {  GlobalKey<FormState> formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    return Scaffold(      body: SingleChildScrollView(        child: Form(          key: formKey,          child: Padding(            padding: EdgeInsets.all(20),            child: Consumer<ContactProvider>(                builder: (context, contactProvider, child) {              return Column(                children: [                  Padding(                    padding:                        EdgeInsets.only(top: 3, bottom: 8, right: 8, left: 8),                    child: InkWell(                      onTap: () {                        contactProvider.imagecamera();                      },                      child: CircleAvatar(                        minRadius: MediaQuery.sizeOf(context).height * 0.09,                        backgroundImage: contactProvider.xFile != null                            ? FileImage(                                File(contactProvider.xFile?.path ?? ""),                              )                            : null,                        child: contactProvider.xFile == null                            ? Icon(Icons.add_a_photo_outlined)                            : null,                      ),                    ),                  ),                  Padding(                    padding: const EdgeInsets.only(                        top: 6, left: 2, right: 2, bottom: 6),                    child: TextFormField(                      controller: contactProvider.nameController,                      keyboardType: TextInputType.name,                      decoration: InputDecoration(                        prefixIcon: Icon(Icons.person),                        hintText: "Full Name",                        border: OutlineInputBorder(),                      ),                      validator: (val) {                        if (val!.isEmpty) {                          return "Please Enter Full Name";                        } else {                          return null;                        }                      },                    ),                  ),                  Padding(                    padding: const EdgeInsets.only(                        top: 6, left: 2, right: 2, bottom: 6),                    child: TextFormField(                      controller: contactProvider.phoneController,                      keyboardType: TextInputType.phone,                      decoration: InputDecoration(                        prefixIcon: Icon(Icons.phone),                        hintText: "Phone Number",                        border: OutlineInputBorder(),                      ),                      validator: (val) {                        if (val!.isEmpty) {                          return "Enter Phone Number";                        } else if (val.length != 10) {                          return "Not Valid Number";                        } else {                          return null;                        }                      },                    ),                  ),                  Padding(                    padding: const EdgeInsets.only(                        top: 6, left: 2, right: 2, bottom: 6),                    child: TextFormField(                      controller: contactProvider.chatController,                      decoration: InputDecoration(                        prefixIcon: Icon(Icons.chat),                        hintText: "Chat Conversation",                        border: OutlineInputBorder(),                      ),                      validator: (val) {                        if (val!.isEmpty) {                          return "Please Enter Chat Conversion";                        } else {                          return null;                        }                      },                    ),                  ),                  Padding(                    padding: const EdgeInsets.only(left: 10, top: 8),                    child: Row(                      children: [                        InkWell(                          onTap: () async {                            contactProvider.selectdate = await showDatePicker(                              context: context,                              firstDate: DateTime.now(),                              lastDate: DateTime(2050),                              initialDate: DateTime.now(),                            );                            contactProvider.refresh();                          },                          child: Icon(                            Icons.calendar_month,                            size: 20,                          ),                        ),                        SizedBox(                          width: 10,                        ),                        Text(                          contactProvider.selectdate != null                              ? contactProvider.mydate                                  .format(contactProvider.selectdate!)                              : "Pick Date",                          style: TextStyle(fontSize: 15, color: Colors.black54),                        ),                      ],                    ),                  ),                  Padding(                    padding: const EdgeInsets.only(left: 10, top: 8),                    child: Row(                      children: [                        InkWell(                          onTap: () async {                            contactProvider.selecttime = await showTimePicker(                              context: context,                              initialTime: TimeOfDay.now(),                            );                            contactProvider.refresh();                          },                          child: Icon(                            Icons.access_time_outlined,                            size: 20,                          ),                        ),                        SizedBox(                          width: 10,                        ),                        Text(                          contactProvider.selecttime != null                              ? "${contactProvider.selecttime?.hour}:${contactProvider.selecttime?.minute}"                              : "Pick Time",                          style: TextStyle(fontSize: 15, color: Colors.black54),                        ),                      ],                    ),                  ),                  SizedBox(                    height: 15,                  ),                  Center(                    child: ElevatedButton(                      onPressed: () {                        var cp = Provider.of<ContactProvider>(context,                            listen: false);                        ContactModal cm = ContactModal(                            name: cp.nameController.text,                            number: cp.phoneController.text,                            chat: cp.chatController.text,                            selectdate: cp.selectdate,                            selecttime: cp.selecttime,                            xFile: cp.xFile);                        if (formKey.currentState?.validate() ?? false) {                          if (cp.selectdate == null) {                            final snackBar = SnackBar(                              content: Text('Pick Date Please !!'),                              duration: Duration(                                  seconds: 2), // You can customize the duration                            );                            ScaffoldMessenger.of(context)                                .showSnackBar(snackBar);                          } else if (cp.selecttime == null) {                            final snackBar = SnackBar(                              content: Text('Pick Time Please !!'),                              duration: Duration(                                  seconds: 2), // You can customize the duration                            );                            ScaffoldMessenger.of(context)                                .showSnackBar(snackBar);                          } else {                            contactProvider.addcontact(cm);                            saveContactList();                            loadContactList();                            contactProvider.reset();                            print(contactList.length);                            Provider.of<ContactProvider>(context, listen: false)                                .refresh();                            final snackBar = SnackBar(                              content: Text('Contact Saved Successfully'),                              backgroundColor: Colors.blueGrey,                              duration: Duration(                                  seconds: 2), // You can customize the duration                            );                            ScaffoldMessenger.of(context)                                .showSnackBar(snackBar);                          }                        } else {                          print("something wrong");                        }                      },                      child: Text('SAVE'),                    ),                  )                ],              );            }),          ),        ),      ),    );  }}